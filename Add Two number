/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=null;
        ListNode forward=null;
        int carry=0;
        if(l1!=null && l2!=null){
            int sum=l1.val+l2.val;
            if(sum>=10){
                carry=sum/10;
                sum=sum%10;
                
            }else{
                carry=0;
            }
            ListNode node=new ListNode(sum);
            head=node;
            forward=node;
            l1=l1.next;
            l2=l2.next;
        }
        System.out.print(forward.val);
        while(l1!=null && l2!=null){
            int sum=l1.val+l2.val+carry;
            if(sum>=10){
                
                carry=sum/10;
                sum=sum%10;
            }else{
                carry=0;
            }
            ListNode node=new ListNode(sum);
            
            forward.next=node;
            forward=node;
            l1=l1.next;
            l2=l2.next;
        }
        while(l1!=null){
            int sum=l1.val+carry;
            if(sum>=10){
                
                carry=sum/10;
                sum=sum%10;
            }else{
                carry=0;
            }
            ListNode node=new ListNode(sum);
            
            forward.next=node;
            forward=node;
            l1=l1.next;
            
        }
        while(l2!=null){
            int sum=l2.val+carry;
            if(sum>=10){
                
                carry=sum/10;
                sum=sum%10;
            }else{
                carry=0;
            }
            ListNode node=new ListNode(sum);
            
            forward.next=node;
            forward=node;
            l2=l2.next;
            
        }
        if(carry!=0){
            ListNode node=new ListNode(carry);
            
            forward.next=node;
        }
        return head;
    }
}
