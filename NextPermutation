import java.util.* ;
import java.io.*; 
import java.util.ArrayList;
import java.util.Collections;

public class Solution 
{
	public static ArrayList<Integer> nextPermutation(ArrayList<Integer> permutation) 
	{
		if(permutation==null || permutation.size()==1){
            return permutation;
        }
        
        int i=permutation.size()-2;
        while(i>=0 && permutation.get(i)>=permutation.get(i+1)){
            i--;
        }
        if(i >= 0) { // iff we found break point
           int j = permutation.size() - 1;
           while(permutation.get(j) <= permutation.get(i)) j--; // find smallest integer greater than break-point integer
           
           Collections.swap(permutation,i,j);; // swap the integers
       }
        // reverse array apart from prefix
        

        
        reverse(permutation,i+1,permutation.size()-1);
        return permutation;
	}
    
    

public static void reverse(ArrayList<Integer> permutation, int i, int j) {
    while(i < j){
        Collections.swap(permutation,i++,j--);
    }
}
}
